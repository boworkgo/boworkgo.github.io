<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bowork, go!</title>
    <description>Hopefully, a blog but better.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 30 Jul 2019 00:11:25 -0400</pubDate>
    <lastBuildDate>Tue, 30 Jul 2019 00:11:25 -0400</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>OSCP Advice</title>
        <description>&lt;h1 id=&quot;7-29-2019-948-pm&quot;&gt;7-29-2019 9:48 PM&lt;/h1&gt;

&lt;p&gt;My exam is fewer than three weeks from today. It is so scary because I don’t feel prepared, but hopefully, that will change soon. To give me some hope and some relaxing time, I’m writing about I’ve learned from the labs:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OneNote is a great reporting template.&lt;/li&gt;
  &lt;li&gt;Just because a process is running on port 80 doesn’t mean it’s a website (hello, &lt;code class=&quot;highlighter-rouge&quot;&gt;nc -nlvp 80 -e evil.sh&lt;/code&gt;). Be skeptical of nmap results: they may not capture everything. If that’s so, WireShark/file enumeration are your friends.&lt;/li&gt;
  &lt;li&gt;If you are sure all vulnerabilities discovered don’t lead anywhere, you’re in a rabbit hole, you missed combining vulnerabilities, you’re cracking a machine with a dependency, or you missed some vulnerabilities.&lt;/li&gt;
  &lt;li&gt;Modifying exploits is a pain and a good majority always break/were patched, so don’t be mad if an exploit that &lt;em&gt;should work&lt;/em&gt; doesn’t.&lt;/li&gt;
  &lt;li&gt;The powerful shell enablers are RFI/LFI/RCE/correct credentials. If you can’t find any, there may be a vulnerability which will allow you to enumerate more information which will lead to them. Also I always ignore Denial of Service exploits.&lt;/li&gt;
  &lt;li&gt;Some must-know PWK topics are knowing how to file upload in web/shell environments, searching for exploits in Google, GitHub, and searchsploit, privilege escalation techniques, and fixing/understanding exploit compilation errors.&lt;/li&gt;
  &lt;li&gt;Gather all possible exploits and rank their probability of success before trying to execute them.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;May everyone trying to get OSCP certified find success. :)&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jul 2019 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2019/07/29/OSCP-Update</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/29/OSCP-Update</guid>
        
        
      </item>
    
      <item>
        <title>PlaidCTF 2019 Writeup</title>
        <description>&lt;h1 id=&quot;4-15-2019-1210-am&quot;&gt;4-15-2019 12:10 AM&lt;/h1&gt;

&lt;h3 id=&quot;docker&quot;&gt;Docker&lt;/h3&gt;

&lt;p&gt;Just so you know, or I might be wrong: a docker image is the immutable source code, and docker container is an image’s running instance. I pulled the challenge image and tried to grep for the flag in the container. When that didn’t work, I searched for the flag in the image location.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;solution.sh&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker pull whowouldeverguessthis/public
sudo docker images
sudo docker image inspect whowouldeverguessthis/public
sudo docker ps -a
sudo docker run -it --name testPCTF whowouldeverguessthis/public bash
	grep -rI --exclude-dir=proc --exclude-dir=sys 'PCTF{' .
cd /var/lib/docker/
sudo grep -rI 'PCTF{' .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;PCTF{well_it_isnt_many_points_what_did_you_expect}&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;everland&quot;&gt;Everland&lt;/h3&gt;

&lt;p&gt;This was a game hacking problem. First, I guessed that recuperating every turn would let me defeat all the monsters except for the Possessed Monster. Then, I found a function in the game called &lt;code class=&quot;highlighter-rouge&quot;&gt;Sacrifice&lt;/code&gt;. I found the health of the Possessed monster was defined by &lt;code class=&quot;highlighter-rouge&quot;&gt;max((!strength)*5, 250)&lt;/code&gt;, so I needed to alter the former parameter. With some more guessing, I altered the first parameter to be &lt;code class=&quot;highlighter-rouge&quot;&gt;65 * 5 = 325&lt;/code&gt;, enabling the &lt;code class=&quot;highlighter-rouge&quot;&gt;Sacrifice&lt;/code&gt; function, enabling me to defeat the Possessed monster.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;everland.sml&lt;/em&gt; (Original file)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
if (!should_capture) andalso (not (!has_captured)) 
then
  if (!e_h &amp;gt; 50) then
(TextIO.print (&quot;It was too strong, you failed to capture &quot;^
  (color e_name ORANGE));
enemy)
  else
  let
val _ = should_capture := false
val _ = has_captured := true
val _ = captured := enemy
(* Kill them so that you can heal yourself *)
fun sacrifice_fn (my_h, my_s, their_h, their_s) =
  (fn () =&amp;gt; (
 my_h := min((!my_h)+min(!e_h, !my_s*10), player_max);
 e_h  := (!e_h-(!my_h)*10);
 p_ms := List.filter (fn (n, _) =&amp;gt; n &amp;lt;&amp;gt; &quot;Sacrifice&quot;) (!p_ms)),
   fn () =&amp;gt; ()) (* Only used by the AI, not us *)
val _ = p_ms := (List.filter (fn (n, _) =&amp;gt; n &amp;lt;&amp;gt; &quot;Capture&quot;) (!p_ms))
@[(&quot;Sacrifice&quot;, sacrifice_fn)]
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;solution.py&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from pwn import *

r = remote('everland.pwni.ng', '7772')
r.sendline('Greg')
for x in range(79):
r.sendline('fight')
r.sendline('2')
for x in range(5):
r.sendline('forage')
r.sendline('use')
r.sendline('2')
r.sendline('use')
r.sendline('1')
r.sendline('use')
r.sendline('3')
r.sendline('fight')
r.sendline('4')
r.sendline('use')
r.sendline('1')
r.sendline('fight')
r.sendline('5')
r.sendline('fight')
r.sendline('5')
r.interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Flag: &lt;code class=&quot;highlighter-rouge&quot;&gt;PCTF{just_be_glad_i_didnt_arm_cpt_hook_with_GADTs}&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 15 Apr 2019 00:00:00 -0400</pubDate>
        <link>http://localhost:4000/2019/04/15/PlaidCTF-2019-Writeup</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/15/PlaidCTF-2019-Writeup</guid>
        
        
      </item>
    
  </channel>
</rss>